import sys
import time
import socket
import pyfiglet


ascii_art = pyfiglet.figlet_format("Scent", font = "isometric1")
print(ascii_art)
print("----------------------------------------------------------------------")
print("Welcome to Scent - A straightforward port scanner")
print("----------------------------------------------------------------------")

# Menu & Options
options = ["\n1. ICMP Sweep", "2. IPv6", "3. SYN Scan", "4. UDP Scan", "5. Exit", "0. Advanced Options"]

for option in options:
    print(option)

try:
    choice = int(input("\nChoose an option: "))
except ValueError:
    print("Invalid option. For more information, access the advanced options.")
    choice = int(input("\nChoose an option: "))

if choice == 0:
    man = ['h', 'help', '-h', '--help']
    verbose = "\nVerbose has been enabled."
    print(f"{verbose}\nInteger only input has been disabled.")
    choice = input("\nChoose an option: ")
    for flag in man:
            if choice == flag:
                print("\nScent is a straightforward port scanner that allows you to scan for open ports on a target host.")
                print("For more information, visit the GitHub repository at: https://github.com/xaviermontane/MalwareHub/blob/main/Python/Enumeration/Scent.py")
            elif choice != flag and choice != int:
                print("Invalid option. Enter an integer or type 'help' for more information.")
                choice = input("\nChoose an option: ")

if choice == 3:
    host = input("Enter the host to scan: ")
    start_time = time.time() # Â¿?

print("\n----------------------")
print(f"\nScan started...\n")

def open_ports(host, port):
    s = socket.socket()
    try:
        s.connect((host, port))
        s.settimeout(0.2) # Turn mutable
    except:
        # Closed port
        return False
    else:
        # Open port
        return True

for port in range(1, 1025): # Max 65535
    if open_ports(host, port):
        print(f"Port {port} is open")
        if verbose is True:
            print(f"Port {port} is closed")
        elif verbose is True:
            continue

end_time = time.time()
print(f"\nScan completed in just {round(end_time - start_time)} seconds!")