import pyfiglet
import socket
import time


ascii_art = pyfiglet.figlet_format("Scent", font = "isometric1")
def open_port(host, port=type(int), timeout=int(0.2)):
    socket_type = input("Enter the type of socket (TCP/UDP): ")
    if socket_type.upper() == "TCP":
        socket_type = socket.SOCK_STREAM
    elif socket_type.upper() == "UDP":
        socket_type = socket.SOCK_DGRAM
    else:
        socket_type = 0 # Change to both protocols
        print("Invalid socket type! Scanning for both.")
    if verbose == "Y":
        timeout = input("Would you like to change the timeout time? (default is 0.2s): ")
        if timeout == "" or timeout.upper() == "N":
            timeout = float(timeout)
        elif timeout.upper() == "Y":
            selection = input("Enter the timeout time: ")
            timeout = selection
        else:
            print("Invalid input. Using default timeout.")

    s = socket.socket(socket.AF_INET, socket_type, timeout)       
    global start_time
    start_time = time.time()
    print(f"\nScan started...\n")

    try:
        s.connect((host, port))
        s.settimeout(timeout)
    except:
        return False
    else:
        return True

print(ascii_art)
print("----------------------------------------------------------------------")
print(f"Welcome to Scent - A straightforward enumeration tool")
print("----------------------------------------------------------------------")

selection = input("What would you like to do? (1 to ping, 2 for port scaning): ")

if selection == "1":
    pass
if selection == "2":
    verbose = input("\nWould you like to view closed ports? (Y to view, N to skip): ")
    verbose.upper()
    host = input("Enter the host to scan: ")
    host = socket.gethostbyname(host)

    for port in range(1, 1026): # Max 65535
        if open_port(host, port):
            print(f"Port {port} is open | Service: {socket.getservbyport(port)}")
            if verbose == "Y":
                    print(f"Port {port} is closed")
            elif verbose == "N":
                continue
        else:
            pass #EXT

    end_time = time.time()
    print(f"\nScan completed in just {round(end_time - start_time)} seconds!")

selection = input("What would you like to do? (1 to ping, 2 for port scaning): ")
...