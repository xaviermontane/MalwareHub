import pyfiglet
import socket
import time


ascii_art = pyfiglet.figlet_format("Scent", font = "isometric1")
print(ascii_art)
print("----------------------------------------------------------------------")
print(f"Welcome to Scent - A straightforward enumeration tool")
print("----------------------------------------------------------------------")

options = ["1. ICMP Sweep", "2. IPv6"]
menu = print(f"\n{[Options]}") # Display options
# selection = int(input("What would you like to do? (1 to ping, 2 for port scaning): "))

verbose = input("\nWould you like to view closed ports? (Y to view, N to skip): ")
host = input("Enter the host to scan: ")
start_time = time.time() # Â¿?

if selection == 1:
    host = input("Enter the host to scan: ")
    host = socket.gethostbyname(host)
    print(f"\nRunning ping test on {host...}")
    ping(host)

if selection == 2:
    verbose = input("\nWould you like to activate verbose mode? (Y/N): ")
    if verbose == "Y":
        verbose = True
    protocol = input("\nWould you like to scan TCP or UDP ports? (TCP/UDP/N): ")
    host = input("Enter the host to scan: ")
    host = socket.gethostbyname(host)
    start_time = time.time()
    if verbose is True:
        print("Scan started...")
        print(f"\nScanning host: {host}")
        print("----------------------------------------------------------------------")

def ping(host):
    try:
        s.settimeout(0.2)
        socket.gethostbyname(host)
        return True
    except:
        return False


def open_port(host, port):
    if protocol == "TCP":
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    elif protocol == "UDP":
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    elif protocol == "N":
        pass
    else:
        print("Invalid socket type. Please choose TCP, UDP, or N to skip.")

    try:
        s.connect((host, port))
        s.settimeout(0.05) # Turn mutable
    except:
        # Closed port
        return False
    else:
        # Open port
        return True

for port in range(1, 1026): # Max 65535
    if verbose is True:
        print(f"Scanning port {port}...")
    # Check if port is open
    if open_port(host, port):
        print(f"Port {port} is open | Service: {socket.getservbyport(port)}")

        if verbose :
                print(f"Port {port} is closed")
        elif verbose == "N":
            continue
    else:
        pass #EXT

end_time = time.time()
print(f"\nScan completed in just {round(end_time - start_time)} seconds!")